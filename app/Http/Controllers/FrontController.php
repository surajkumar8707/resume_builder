<?php

namespace App\Http\Controllers;

use App\Models\Resume;
use App\Models\TempImage;
use Illuminate\Http\Request;
use Dompdf\Dompdf;
use Dompdf\Options;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\File;
use TCPDF;

class FrontController extends Controller
{
    public function __construct()
    {
    }

    public function index()
    {
        try {
            return view('front.index');
        } catch (\Exception $e) {
            dd($e->getMessage());
        }
    }

    public function exportCv($id)
    {
        try {
            // Include the TCPDF library
            // require_once('vendor/autoload.php');

            // Create a new PDF document
            $pdf = new TCPDF();

            $resume = Resume::with(['workExperiences', 'educations', 'skills', 'languages', 'user'])->where('id', $id)->first();
            // dd($resume->toArray());

            // Set document information
            $pdf->SetCreator(PDF_CREATOR);
            $pdf->SetAuthor('Your Name');
            $pdf->SetTitle('Sample PDF');
            $pdf->SetSubject('TCPDF Tutorial');
            $pdf->SetKeywords('TCPDF, PDF, PHP');

            // Set default header data
            // $pdf->SetHeaderData('', 0, 'Sample PDF', 'Generated by TCPDF');

            // // Set header and footer fonts
            // $pdf->setHeaderFont(array(PDF_FONT_NAME_MAIN, '', PDF_FONT_SIZE_MAIN));
            // $pdf->setFooterFont(array(PDF_FONT_NAME_DATA, '', PDF_FONT_SIZE_DATA));

            // // Set default monospaced font
            // $pdf->SetDefaultMonospacedFont(PDF_FONT_MONOSPACED);

            // // Set margins
            // $pdf->SetMargins(PDF_MARGIN_LEFT, PDF_MARGIN_TOP, PDF_MARGIN_RIGHT);
            // $pdf->SetHeaderMargin(PDF_MARGIN_HEADER);
            // $pdf->SetFooterMargin(PDF_MARGIN_FOOTER);

            // Set auto page breaks
            $pdf->SetAutoPageBreak(TRUE, PDF_MARGIN_BOTTOM);

            // Set image scale factor
            $pdf->setImageScale(PDF_IMAGE_SCALE_RATIO);

            // Add a page
            $pdf->AddPage();

            // Set some content to display
            $html = view('front.cv.templates.energetic', compact('resume'))->render();

            // Output the HTML content
            $pdf->writeHTML($html, true, false, true, false, '');

            // Close and output PDF document
            $pdf->Output('sample.pdf', 'I');
            // return view('front.cv.templates.professional', compact('resume'));
        } catch (\Exception $e) {
            dd($e->getMessage());
        }
    }

    public function createCV()
    {
        try {
            return view('front.cv.create');
        } catch (\Exception $e) {
            dd($e->getMessage());
        }
    }

    public function submitCV(Request $request)
    {
        // dd($request->all());
        $validatedData = $request->validate(
            [
                'first_name' => 'required|string|max:255',
                'last_name' => 'required|string|max:255',
                'email' => 'required|email',
                'phone' => 'required|string|max:20',
                'address' => 'nullable|string|max:255',
                'country' => 'nullable|string|max:255',
                'state' => 'nullable|string|max:255',
                'city' => 'nullable|string|max:255',
                'photo' => 'nullable',

                'work_experience.*.company_name' => 'required|string|max:255',
                'work_experience.*.position' => 'required|string|max:255',
                'work_experience.*.start_date' => 'required|date_format:Y-m',
                'work_experience.*.end_date' => 'nullable|date_format:Y-m',
                'work_experience.*.currently_work' => 'nullable',
                'work_experience.*.country' => 'nullable|string|max:255',
                'work_experience.*.state' => 'nullable|string|max:255',
                'work_experience.*.city' => 'nullable|string|max:255',

                'education.*.school_name' => 'required|string|max:255',
                'education.*.degree' => 'nullable|string|max:255',
                'education.*.field_of_study' => 'nullable|string|max:255',
                'education.*.start_date' => 'required|date_format:Y-m',
                'education.*.end_date' => 'nullable|date_format:Y-m',
                'education.*.currently_study' => 'nullable',
                'education.*.country' => 'nullable|string|max:255',
                'education.*.state' => 'nullable|string|max:255',
                'education.*.city' => 'nullable|string|max:255',

                // 'skills.*.name' => 'required|string|max:255',
                'skills.*.name' => 'required|string|max:255',

                'languages.*.name' => 'required|string',
                'languages.*.level' => 'nullable|integer',

                'professional_summary' => 'nullable|string',
            ]
        );
        try {
            $professionalSummary = $this->convertProfessionalSummaryToArray($request->professional_summary);
            // dd($request->education, $request->all());

            // dd($request->work_experience, $validatedData, $professionalSummary, $request->all());

            $resume = new Resume();
            $resume->first_name = $validatedData['first_name'];
            $resume->last_name = $validatedData['last_name'];
            $resume->email = $validatedData['email'];
            $resume->phone = $validatedData['phone'];
            $resume->address = $validatedData['address'];
            $resume->country = $validatedData['country'];
            $resume->state = $validatedData['state'];
            $resume->city = $validatedData['city'];
            $resume->professional_summary = $validatedData['professional_summary'];
            $resume->save();

            if (Auth::check()) {
                $resume->user_id = Auth::user()->id;
                $resume->save();
            }

            if (!empty($request->image_id)) {
                $tempImage = TempImage::find($request->image_id);
                $extArray = explode('.', $tempImage->name);
                $ext = last($extArray);

                $newImageName = 'resume_' . $resume->id . '_' . time() . '.' . $ext;

                $sPath = public_path() . '/temp/' . $tempImage->name;
                $dPath = public_path() . '/assets/resume_images/' . $newImageName;

                File::copy($sPath, $dPath);

                $resume->photo = $newImageName;
                $resume->save();
            }

            // Save related models
            if ($request->work_experience) {
                $resume->workExperiences()->createMany($request->work_experience);
            }
            if ($request->education) {
                $resume->educations()->createMany($request->education);
            }
            if ($request->skills) {
                $resume->skills()->createMany($request->skills);
            }
            if ($request->languages) {
                $resume->languages()->createMany($request->languages);
            }

            return redirect()->route('front.print', $resume->id)->with('success', 'Resume created successfully');

            if (Auth::check()) {
                return redirect()->route('user.my.resumes.index')->with('success', 'Resume Created successfully');
            } else {
                return redirect()->route('front.create.cv')->with('success', 'Resume Created successfully');
            }
        } catch (\Exception $e) {
            dd($e->getMessage());
        }
    }

    // public function generatePdf()
    // {
    //     // Get the HTML content from your Blade file
    //     $html = view('front.cv.templates.professional')->render(); // Assuming your Blade file is named resume.blade.php

    //     // Instantiate Dompdf with options (optional)
    //     $options = new Options();
    //     $options->set('isHtml5ParserEnabled', true);
    //     $options->set('isPhpEnabled', true);

    //     $dompdf = new Dompdf($options);

    //     // Load HTML to Dompdf
    //     $dompdf->loadHtml($html);

    //     // Set paper size and orientation (optional)
    //     $dompdf->setPaper('A4', 'portrait');

    //     // Render the HTML as PDF
    //     $dompdf->render();

    //     // Output the generated PDF (inline or download)
    //     $headers = [
    //         'Content-Type' => 'application/pdf',
    //     ];

    //     return response()->stream(function () use ($dompdf) {
    //         echo $dompdf->output();
    //     }, 200, $headers);
    // }

    private function convertProfessionalSummaryToArray($summary)
    {
        // Split the summary into sentences or lines
        $lines = preg_split('/\r\n|\r|\n/', $summary); // Split by new lines

        // Trim each line to remove extra whitespace
        $trimmedLines = array_map('trim', $lines);

        // Remove any empty lines
        $filteredLines = array_filter($trimmedLines, function ($line) {
            return !empty($line);
        });

        // Convert to indexed array
        $summaryArray = array_values($filteredLines);

        return $summaryArray;
    }

    public function tempImageCreate(Request $request)
    {
        try {
            // dd($request->all());
            $image = $request->image;

            if (!empty($image)) {
                $ext = $image->getClientOriginalExtension();
                $newName = time() . '.' . $ext;

                $tempImage = new TempImage();
                $tempImage->name = $newName;
                $tempImage->save();

                $image->move(public_path() . '/temp', $newName);

                return returnWebJsonResponse('Image upload success', 'success', $tempImage);
            } else {
                return returnWebJsonResponse('Something went wrong, please refresh the page  and try again');
            }
        } catch (\Exception $e) {
            return returnWebJsonResponse($e->getMessage());
        }
    }
}
